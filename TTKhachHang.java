/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package qlvembay;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
/**
 *
 * @author khanh ngu
 */
public class TTKhachHang extends javax.swing.JFrame {

    /**
     * Creates new form TTKhachHang
     */
    public TTKhachHang() {
        initComponents();
    }
    private Connection getConnect() {
        try {
        // Thay đổi thông tin kết nối theo cấu hình của bạn
        String url = "jdbc:mysql://127.0.0.1:3306/qlvemaybay";
        String user = "root";
        String password = "";

        // Tạo kết nối
        Connection connection = DriverManager.getConnection(url, user, password);

        System.out.println("Kết nối thành công đến cơ sở dữ liệu!");
        return connection;
    } catch (SQLException ex) {
        System.err.println("Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
        return null;
    }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNgaySinh = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cboGioiTinh = new javax.swing.JComboBox<>();
        btnAddkh = new javax.swing.JButton();
        txtMaKhachHang = new javax.swing.JTextField();
        txtQuocTich = new javax.swing.JTextField();
        txtDiaChi = new javax.swing.JTextField();
        txtCCCD = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtDienThoai = new javax.swing.JTextField();
        btnLuukh = new javax.swing.JButton();
        txtHoTen = new javax.swing.JTextField();
        btnSuakh = new javax.swing.JButton();
        btnXoakh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbkhachhang = new javax.swing.JTable();
        btnback = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(860, 460));

        jPanel1.setPreferredSize(new java.awt.Dimension(900, 500));

        jPanel2.setPreferredSize(new java.awt.Dimension(800, 600));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Thông tin khách hàng");

        jLabel2.setText("Họ và tên:");

        jLabel3.setText("Ngày sinh:");

        txtNgaySinh.setText("\n");
        txtNgaySinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNgaySinhActionPerformed(evt);
            }
        });

        jLabel4.setText("CCCD:");

        jLabel5.setText("Giới tính:");

        jLabel6.setText("Quốc tịch:");

        jLabel7.setText("Địa chỉ:");

        jLabel8.setText("Mã khách hàng:");

        cboGioiTinh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ", "Khác" }));
        cboGioiTinh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboGioiTinhActionPerformed(evt);
            }
        });

        btnAddkh.setText("Tạo");
        btnAddkh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddkhActionPerformed(evt);
            }
        });

        txtQuocTich.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuocTichActionPerformed(evt);
            }
        });

        jLabel14.setText("Điện thoại:");

        btnLuukh.setText("Lưu");
        btnLuukh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuukhActionPerformed(evt);
            }
        });

        btnSuakh.setText("Sửa");
        btnSuakh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuakhActionPerformed(evt);
            }
        });

        btnXoakh.setText("Xóa");
        btnXoakh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoakhActionPerformed(evt);
            }
        });

        tbkhachhang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Họ và tên", "Ngày sinh", "Giới tính", "Địa chỉ", "Quốc tịch", "CCCD", "Điện thoại"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbkhachhang);

        btnback.setIcon(new javax.swing.ImageIcon("G:\\kien truc\\java\\back.jpg")); // NOI18N
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(btnLuukh)
                        .addGap(98, 98, 98)
                        .addComponent(btnAddkh)
                        .addGap(117, 117, 117)
                        .addComponent(btnSuakh)
                        .addGap(101, 101, 101)
                        .addComponent(btnXoakh))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnback)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel3))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtMaKhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(114, 114, 114)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cboGioiTinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtDienThoai, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                                            .addComponent(txtCCCD)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtQuocTich, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(308, 308, 308)
                                .addComponent(jLabel1))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnback)
                        .addGap(46, 46, 46))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(27, 27, 27)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMaKhachHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCCCD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cboGioiTinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(txtDienThoai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtQuocTich, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddkh)
                    .addComponent(btnSuakh)
                    .addComponent(btnXoakh)
                    .addComponent(btnLuukh))
                .addContainerGap(221, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 921, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(100, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNgaySinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNgaySinhActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNgaySinhActionPerformed

    private void cboGioiTinhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboGioiTinhActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboGioiTinhActionPerformed

    private void btnAddkhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddkhActionPerformed
        try (Connection connection = getConnect()) {
        // Kiểm tra nếu kết nối thành công
        if (connection != null) {
            // Lấy thông tin từ giao diện người dùng
            String idkh = txtMaKhachHang.getText();
            String tenkh = txtHoTen.getText();
            String gioitinhkh = (String) cboGioiTinh.getSelectedItem();
            String ngaysinhkh = txtNgaySinh.getText();
            String cccd = txtCCCD.getText();
            String diachi = txtDiaChi.getText();
            String sdt = txtDienThoai.getText();
            String quoctich = txtQuocTich.getText();

            // Chuẩn bị câu truy vấn SQL để thêm khách hàng
            String query = "INSERT INTO khach_hang (id, ten, Ngaysinh, gioi_tinh, dia_chi, quoc_tich, CCCD, dien_thoai) VALUES (?,?, ?, ?, ?, ?, ?, ?)";

            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                // Thiết lập giá trị cho các tham số trong câu truy vấn
                preparedStatement.setString(1, idkh);
                preparedStatement.setString(2, tenkh);
                preparedStatement.setString(3, ngaysinhkh);
                preparedStatement.setString(4, gioitinhkh);
                preparedStatement.setString(5, diachi);
                preparedStatement.setString(6, quoctich);
                preparedStatement.setString(7, cccd);
                preparedStatement.setString(8, sdt);
                

                // Thực hiện truy vấn thêm
                int rowsAffected = preparedStatement.executeUpdate();

                if (rowsAffected > 0) {
                    System.out.println("Thêm khách hàng thành công!");
                    updateTable();
                } else {
                    System.out.println("Thêm khách hàng thất bại!");
                }
            } catch (SQLException ex) {
                System.err.println("Lỗi thực hiện truy vấn thêm: " + ex.getMessage());
            }
        }
    } catch (SQLException ex) {
        System.err.println("Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
    }
        clearInputFields();
       
    }//GEN-LAST:event_btnAddkhActionPerformed

    
        private void clearInputFields() {
    // Xóa nội dung trong các trường nhập liệu
txtMaKhachHang.setText("");
txtHoTen.setText("");
cboGioiTinh.setSelectedIndex(0);
txtNgaySinh.setText("");
txtCCCD.setText("");
txtDiaChi.setText("");
txtDienThoai.setText("");
txtQuocTich.setText("");
    
}
    public void updateTable() {
        try (Connection connection = getConnect()) {
//         Kiểm tra nếu kết nối thành công
            if (connection != null) {
            // Chuẩn bị câu truy vấn SQL để lấy dữ liệu từ bảng khachhang
                String query = "SELECT * FROM khach_hang";

                try (PreparedStatement preparedStatement = connection.prepareStatement(query);
                     ResultSet resultSet = preparedStatement.executeQuery()) {

                // Xóa dữ liệu hiện tại trong bảng
                    DefaultTableModel model = (DefaultTableModel) tbkhachhang.getModel();
                    model.setRowCount(0);

                // Duyệt qua kết quả và thêm vào bảng
                    while (resultSet.next()) {
                        String idkh  = resultSet.getString("id");
                        String tenkh = resultSet.getString("ten");
                        String ngaysinhkh = resultSet.getString("Ngaysinh");
                        String gioitinh = resultSet.getString("gioi_tinh");
                        String diachi = resultSet.getString("dia_chi");
                        String quoctich = resultSet.getString("quoc_tich");
                        String cccd = resultSet.getString("CCCD");
                        String sdt = resultSet.getString("dien_thoai");

                        model.addRow(new Object[]{idkh, tenkh, ngaysinhkh, gioitinh, diachi, quoctich, cccd, sdt});
                    }
            }   catch (SQLException ex) {
                    System.err.println("Lỗi thực hiện truy vấn: " + ex.getMessage());
            }
        }
    } catch (SQLException ex) {
        System.err.println("Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
    }
    }    
    private void btnLuukhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuukhActionPerformed
        int selectedRowIndex = tbkhachhang.getSelectedRow();

    if (selectedRowIndex != -1) {
        // Get the values from the input fields
            String idkh = txtMaKhachHang.getText();
            String tenkh = txtHoTen.getText();
            String gioitinhkh = (String) cboGioiTinh.getSelectedItem();
            String ngaysinhkh = txtNgaySinh.getText();
            String cccd = txtCCCD.getText();
            String diachi = txtDiaChi.getText();
            String sdt = txtDienThoai.getText();
            String quoctich = txtQuocTich.getText(); // Assuming you have a JComboBox for roomid

        try (Connection connection = getConnect()) {
            // Kiểm tra nếu kết nối thành công
            if (connection != null) {
                // Chuẩn bị câu truy vấn SQL để cập nhật thông tin khách hàng
                String query = "UPDATE khach_hang SET ten = ?, Ngaysinh = ?, gioi_tinh = ?, dia_chi = ?, quoc_tich = ?, CCCD = ?, dien_thoai = ? WHERE id = ?";

                try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                    // Thiết lập giá trị cho các tham số trong câu truy vấn
                    
                    preparedStatement.setString(1, tenkh);
                    preparedStatement.setString(2, ngaysinhkh);
                    preparedStatement.setString(3, gioitinhkh);
                    preparedStatement.setString(4, diachi);
                    preparedStatement.setString(5, quoctich);
                    preparedStatement.setString(6, cccd);
                    preparedStatement.setString(7, sdt);
                    preparedStatement.setString(8, idkh);

                    // Thực hiện truy vấn cập nhật
                    int rowsAffected = preparedStatement.executeUpdate();

                    if (rowsAffected > 0) {
                        System.out.println("Cập nhật thông tin khách hàng thành công!");
                        // Sau khi cập nhật thành công, cập nhật lại bảng
                        updateTableKhachHang();
                        // Xóa nội dung trong các trường nhập liệu sau khi lưu
                        clearInputFields();
                    } else {
                        System.out.println("Không tìm thấy khách hàng để cập nhật!");
                    }
                } catch (SQLException ex) {
                    System.err.println("Lỗi thực hiện truy vấn cập nhật: " + ex.getMessage());
                }
            }
        } catch (SQLException ex) {
            System.err.println("Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
        }
    } else {
        System.out.println("Vui lòng chọn một dòng để cập nhật!");
    }        
    }//GEN-LAST:event_btnLuukhActionPerformed

    
    
    public void updateTableKhachHang() {
    try (Connection connection = getConnect()) {
        // Kiểm tra nếu kết nối thành công
        if (connection != null) {
            // Chuẩn bị câu truy vấn SQL để lấy dữ liệu từ bảng khachhang
            String query = "SELECT * FROM khach_hang";

            try (PreparedStatement preparedStatement = connection.prepareStatement(query);
                 ResultSet resultSet = preparedStatement.executeQuery()) {

                // Xóa dữ liệu hiện tại trong bảng
                DefaultTableModel model = (DefaultTableModel) tbkhachhang.getModel();
                model.setRowCount(0);

                // Duyệt qua kết quả và thêm vào bảng
                while (resultSet.next()) {
                    String idkh  = resultSet.getString("id");
                    String tenkh = resultSet.getString("ten");
                    String ngaysinhkh = resultSet.getString("Ngaysinh");
                    String gioitinh = resultSet.getString("gioi_tinh");
                    String diachi = resultSet.getString("dia_chi");
                    String quoctich = resultSet.getString("quoc_tich");
                    String cccd = resultSet.getString("CCCD");
                    String sdt = resultSet.getString("dien_thoai");

                    model.addRow(new Object[]{idkh, tenkh, ngaysinhkh, gioitinh, diachi, quoctich, cccd, sdt});
                }
            } catch (SQLException ex) {
                System.err.println("Lỗi thực hiện truy vấn: " + ex.getMessage());
            }
        }
    } catch (SQLException ex) {
        System.err.println("Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
    }
}
    private void btnXoakhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoakhActionPerformed
        int selectedRowIndex = tbkhachhang.getSelectedRow();

    if (selectedRowIndex != -1) {
        // Lấy giá trị của cột CID từ dòng được chọn
        String idkh = tbkhachhang.getValueAt(selectedRowIndex, 0).toString();

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn xóa?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection connection = getConnect()) {
                // Kiểm tra nếu kết nối thành công
                if (connection != null) {
                    // Chuẩn bị câu truy vấn SQL để xóa thông tin khách hàng
                    String query = "DELETE FROM khach_hang WHERE id = ?";

                    try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                        // Thiết lập giá trị cho tham số trong câu truy vấn
                        preparedStatement.setString(1, idkh);

                        // Thực hiện truy vấn xóa
                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            System.out.println("Xóa thông tin khách hàng thành công!");
                            // Sau khi xóa thành công, cập nhật lại bảng
                            updateTableKhachHang();
                            // Xóa nội dung trong các trường nhập liệu sau khi xóa
                            clearInputFields();
                        } else {
                            System.out.println("Không tìm thấy khách hàng để xóa!");
                        }
                    } catch (SQLException ex) {
                        System.err.println("Lỗi thực hiện truy vấn xóa: " + ex.getMessage());
                    }
                }
            } catch (SQLException ex) {
                System.err.println("Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
            }
        }
    } else {
        System.out.println("Vui lòng chọn một dòng để xóa!");
    }        // TODO add your handling code here:
    }//GEN-LAST:event_btnXoakhActionPerformed

    private void txtQuocTichActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuocTichActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuocTichActionPerformed

    private void btnSuakhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuakhActionPerformed
         int selectedRowIndex = tbkhachhang.getSelectedRow();

    if (selectedRowIndex != -1) {
        // Get the values from the selected row
        String idkh = tbkhachhang.getValueAt(selectedRowIndex, 0).toString();
        String tenkh = tbkhachhang.getValueAt(selectedRowIndex, 1).toString();
        String ngaysinhkh = tbkhachhang.getValueAt(selectedRowIndex, 2).toString();
        String gioitinhkh = tbkhachhang.getValueAt(selectedRowIndex, 3).toString();
        String diachi = tbkhachhang.getValueAt(selectedRowIndex, 4).toString();
        String quoctich = tbkhachhang.getValueAt(selectedRowIndex, 5).toString();
        String cccd = tbkhachhang.getValueAt(selectedRowIndex, 6).toString();
        String sdt = tbkhachhang.getValueAt(selectedRowIndex, 7).toString();
        

        // Fill the input fields with the selected data
        txtMaKhachHang.setText(idkh);
        txtHoTen.setText(tenkh);
        cboGioiTinh.setSelectedItem(gioitinhkh);
        txtNgaySinh.setText(ngaysinhkh);
        txtCCCD.setText(cccd);
        txtDiaChi.setText(diachi);
        txtDienThoai.setText(sdt);
        txtQuocTich.setText(quoctich);
    } else {
        System.out.println("Vui lòng chọn một dòng để sửa!");
    }        // TODO add your handling code here:
    }//GEN-LAST:event_btnSuakhActionPerformed

    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed
        Menu mn = new Menu();
        mn.setVisible(true);

        this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_btnbackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TTKhachHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TTKhachHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TTKhachHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TTKhachHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TTKhachHang form = new TTKhachHang();
                // Gọi phương thức updateTable ngay sau khi khởi tạo
                form.updateTable();
                form.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddkh;
    private javax.swing.JButton btnLuukh;
    private javax.swing.JButton btnSuakh;
    private javax.swing.JButton btnXoakh;
    private javax.swing.JButton btnback;
    private javax.swing.JComboBox<String> cboGioiTinh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbkhachhang;
    private javax.swing.JTextField txtCCCD;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtDienThoai;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JTextField txtMaKhachHang;
    private javax.swing.JTextField txtNgaySinh;
    private javax.swing.JTextField txtQuocTich;
    // End of variables declaration//GEN-END:variables
}
