/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package qlvembay;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author khanh ngu
 */
public class TVM extends javax.swing.JInternalFrame {

    /**
     * Creates new form TVM
     */
    public TVM() {
        initComponents();
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI ui= (BasicInternalFrameUI)this.getUI();
        ui.setNorthPane(null);
        
    }
    private Connection getConnect() {
        try {
        // Thay đổi thông tin kết nối theo cấu hình của bạn
        String url = "jdbc:mysql://127.0.0.1:3306/qlvemaybay";
        String user = "root";
        String password = "";

        // Tạo kết nối
        Connection connection = DriverManager.getConnection(url, user, password);

        System.out.println("Kết nối thành công đến cơ sở dữ liệu!");
        return connection;
    } catch (SQLException ex) {
        System.err.println("Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
        return null;
    }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtngaydat = new javax.swing.JTextField();
        txtdiemdi = new javax.swing.JTextField();
        txtngaybay = new javax.swing.JTextField();
        txtdiemden = new javax.swing.JTextField();
        txtgiobay = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbvemoi = new javax.swing.JTable();
        btnAddve = new javax.swing.JButton();
        btnLuuve = new javax.swing.JButton();
        btnXoave = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnSuave = new javax.swing.JButton();
        cboidkh = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cboidnv = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cbohangbay = new javax.swing.JComboBox<>();
        txtidve = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cboloaive = new javax.swing.JComboBox<>();

        tbvemoi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "ID khách hàng", "ID nhân viên", "Hãng bay", "Loại vé", "Ngày đặt vé", "Điểm đi", "Điểm đến", "Ngày bay", "Giờ bay"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tbvemoi);

        btnAddve.setText("Tạo");
        btnAddve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddveActionPerformed(evt);
            }
        });

        btnLuuve.setText("Lưu");
        btnLuuve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuveActionPerformed(evt);
            }
        });

        btnXoave.setText("Hủy");
        btnXoave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaveActionPerformed(evt);
            }
        });

        jLabel2.setText("Mã vé:");

        btnSuave.setText("Sửa");
        btnSuave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaveActionPerformed(evt);
            }
        });

        jLabel3.setText("Mã nhân viên:");

        jLabel4.setText("Mã khách hàng:");

        jLabel5.setText("Ngày đặt:");

        jLabel6.setText("Hãng bay:");

        jLabel7.setText("Điểm đi:");

        jLabel8.setText("Điểm đến:");

        jLabel9.setText("Ngày bay:");

        jLabel10.setText("Giờ bay:");

        cbohangbay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vietnam Airlines", "VietJet Air", "Bamboo Airways" }));

        jLabel1.setText("Loại vé:");

        cboloaive.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Phổ Thông", "Thương Gia" }));
        cboloaive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboloaiveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(448, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(50, 50, 50)
                .addComponent(cboloaive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(145, 145, 145))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(2, 2, 2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(44, 44, 44)
                            .addComponent(btnLuuve)
                            .addGap(119, 119, 119)
                            .addComponent(btnSuave)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddve)
                            .addGap(112, 112, 112)
                            .addComponent(btnXoave)
                            .addGap(74, 74, 74))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(118, 118, 118)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel2)
                                .addComponent(jLabel4)
                                .addComponent(jLabel7)
                                .addComponent(jLabel9))
                            .addGap(34, 34, 34)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtidve)
                                        .addComponent(txtdiemdi, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                                        .addComponent(txtngaybay)
                                        .addComponent(cboidkh, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(95, 95, 95)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel10))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtngaydat)
                                        .addComponent(txtdiemden, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                                        .addComponent(txtgiobay)
                                        .addComponent(cboidnv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(cbohangbay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 773, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(3, 3, 3)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboloaive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(265, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(25, 25, 25)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)
                        .addComponent(txtidve, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cboidnv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)
                        .addComponent(txtngaydat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cboidkh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(cbohangbay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(jLabel8)
                        .addComponent(txtdiemdi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtdiemden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(jLabel10)
                        .addComponent(txtngaybay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtgiobay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAddve)
                        .addComponent(btnLuuve)
                        .addComponent(btnXoave)
                        .addComponent(btnSuave))
                    .addContainerGap(26, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddveActionPerformed
        try (Connection connection = getConnect()) {
            // Kiểm tra nếu kết nối thành công
            if (connection != null) {
                // Lấy thông tin từ giao diện người dùng
                String idve = txtidve.getText();
                String idkh = (String) cboidkh.getSelectedItem();
                String idnv = (String) cboidnv.getSelectedItem();
                String ngaydat = txtngaydat.getText();
                String loaive = (String) cboloaive.getSelectedItem();
                String hangbay = (String) cbohangbay.getSelectedItem();
                String diemdi = txtdiemdi.getText();
                String diemden = txtdiemden.getText();
                String ngaybay = txtngaybay.getText();
                String giobay = txtgiobay.getText();

                // Chuẩn bị câu truy vấn SQL để thêm khách hàng
                String query = "INSERT INTO ve_dat (id, id_khach_hang, id_nhan_vien, ngay_dat,loai_ve, hang_bay, diem_di, diem_den, ngay_bay, gio_bay) VALUES (?,?,?,?,?,?, ?, ?, ?, ?)";

                try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                    // Thiết lập giá trị cho các tham số trong câu truy vấn
                    preparedStatement.setString(1, idve);
                    preparedStatement.setString(2, idkh);
                    preparedStatement.setString(3, idnv);
                    preparedStatement.setString(4, ngaydat);
                    preparedStatement.setString(5, loaive);
                    preparedStatement.setString(6, hangbay);

                    preparedStatement.setString(7, diemdi);
                    preparedStatement.setString(8, diemden);
                    preparedStatement.setString(9, ngaybay);
                    preparedStatement.setString(10, giobay);

                    // Thực hiện truy vấn thêm
                    int rowsAffected = preparedStatement.executeUpdate();

                    if (rowsAffected > 0) {
                        System.out.println("Thêm khách hàng thành công!");
                        updateTable();
                    } else {
                        System.out.println("Thêm khách hàng thất bại!");
                    }
                } catch (SQLException ex) {
                    System.err.println("Lỗi thực hiện truy vấn thêm: " + ex.getMessage());
                }
            }
        } catch (SQLException ex) {
            System.err.println("Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
        }
        clearInputFields();
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddveActionPerformed
    
    
    public void populateComboBoxKhachHang() {
    try (Connection connection = getConnect()) {
        if (connection != null) {
            String query = "SELECT id FROM khach_hang";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query);
                 ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    String idkh = resultSet.getString("id");
                    cboidkh.addItem(idkh);
                }
            } catch (SQLException ex) {
                System.err.println("Lỗi thực hiện truy vấn: " + ex.getMessage());
            }
        }
    } catch (SQLException ex) {
        System.err.println("Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
    }
}

    public void populateComboBoxNhanVien() {
    try (Connection connection = getConnect()) {
        if (connection != null) {
            String query = "SELECT id FROM nhan_vien";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query);
                 ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    String idnv = resultSet.getString("id");
                    cboidnv.addItem(idnv); // Thêm mỗi mã phòng vào ComboBox
                }
            } catch (SQLException ex) {
                System.err.println("Lỗi thực hiện truy vấn: " + ex.getMessage());
            }
        }
    } catch (SQLException ex) {
        System.err.println("Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
    }
}
    
    private void clearInputFields() {
    // Xóa nội dung trong các trường nhập liệu
txtidve.setText("");
cboidkh.setSelectedItem(0);
cboidnv.setSelectedItem(0);
cbohangbay.setSelectedItem(0);    
cboloaive.setSelectedItem(0); 
txtngaydat.setText("");
txtdiemdi.setText("");
txtdiemden.setText("");
txtngaybay.setText("");
txtgiobay.setText(""); 
    
}
    public void updateTable() {
        try (Connection connection = getConnect()) {
//         Kiểm tra nếu kết nối thành công
            if (connection != null) {
            // Chuẩn bị câu truy vấn SQL để lấy dữ liệu từ bảng khachhang
                String query = "SELECT * FROM ve_dat";

                try (PreparedStatement preparedStatement = connection.prepareStatement(query);
                     ResultSet resultSet = preparedStatement.executeQuery()) {

                // Xóa dữ liệu hiện tại trong bảng
                    DefaultTableModel model = (DefaultTableModel) tbvemoi.getModel();
                    model.setRowCount(0);

                // Duyệt qua kết quả và thêm vào bảng
                    while (resultSet.next()) {
                        String idve  = resultSet.getString("id");
                        String idkh = resultSet.getString("id_khach_hang");
                        String idnv = resultSet.getString("id_nhan_vien");
                        String ngaydat = resultSet.getString("ngay_dat");
                        String loaive = resultSet.getString("loai_ve");
                        String hangbay = resultSet.getString("hang_bay");
                        String diemdi = resultSet.getString("diem_di");
                        String diemden = resultSet.getString("diem_den");
                        String ngaybay = resultSet.getString("ngay_bay");
                        String giobay = resultSet.getString("gio_bay");

                        model.addRow(new Object[]{idve, idkh, idnv, ngaydat,loaive, hangbay,diemdi, diemden,ngaybay,giobay});
                    }
            }   catch (SQLException ex) {
                    System.err.println("Lỗi thực hiện truy vấn: " + ex.getMessage());
            }
        }
    } catch (SQLException ex) {
        System.err.println("Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
    }
    }
    
    
    private void btnLuuveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuveActionPerformed
        int selectedRowIndex = tbvemoi.getSelectedRow();

        if (selectedRowIndex != -1) {
            // Get the values from the input fields
            String idve = txtidve.getText();
            String idkh = (String) cboidkh.getSelectedItem();
            String idnv = (String) cboidnv.getSelectedItem();
            String ngaydat = txtngaydat.getText();
            String loaive = (String) cboloaive.getSelectedItem();
            String hangbay = (String) cbohangbay.getSelectedItem();
            String diemdi = txtdiemdi.getText();
            String diemden = txtdiemden.getText();
            String ngaybay = txtngaybay.getText();
            String giobay = txtgiobay.getText();
            try (Connection connection = getConnect()) {
                // Kiểm tra nếu kết nối thành công
                if (connection != null) {
                    // Chuẩn bị câu truy vấn SQL để cập nhật thông tin khách hàng
                    String query = "UPDATE ve_dat SET id_khach_hang = ?,id_nhan_vien  = ?, ngay_dat = ?,loai_ve=?, hang_bay = ?, diem_di = ?, diem_den = ?, ngay_bay = ?, gio_bay = ? WHERE id = ?";

                    try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                        // Thiết lập giá trị cho các tham số trong câu truy vấn

                        preparedStatement.setString(1, idkh);
                        preparedStatement.setString(2, idnv);
                        preparedStatement.setString(3, ngaydat);
                        preparedStatement.setString(4, loaive);
                        preparedStatement.setString(5, hangbay);
                        preparedStatement.setString(6, diemdi);
                        preparedStatement.setString(7, diemden);
                        preparedStatement.setString(8, ngaybay);
                        preparedStatement.setString(9, giobay);
                        preparedStatement.setString(10, idve);

                        // Thực hiện truy vấn cập nhật
                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            System.out.println("Cập nhật thông tin khách hàng thành công!");
                            // Sau khi cập nhật thành công, cập nhật lại bảng
                            updateTable();
                            // Xóa nội dung trong các trường nhập liệu sau khi lưu
                            clearInputFields();
                        } else {
                            System.out.println("Không tìm thấy khách hàng để cập nhật!");
                        }
                    } catch (SQLException ex) {
                        System.err.println("Lỗi thực hiện truy vấn cập nhật: " + ex.getMessage());
                    }
                }
            } catch (SQLException ex) {
                System.err.println("Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
            }
        } else {
            System.out.println("Vui lòng chọn một dòng để cập nhật!");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnLuuveActionPerformed

    private void btnXoaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaveActionPerformed
        int selectedRow = tbvemoi.getSelectedRow();

        if (selectedRow == -1) {
            // No row selected
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một vé để hủy.", "Thông báo", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String idToDelete = tbvemoi.getValueAt(selectedRow, 0).toString(); // Assuming the employee ID is in the first column

        int option = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn hủy vé này?", "Xác nhận hủy", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            try (Connection connection = getConnect()) {
                // Check if the connection is successful
                if (connection != null) {
                    // Prepare the SQL DELETE query
                    String deleteQuery = "DELETE FROM ve_dat WHERE id = ?";

                    try (PreparedStatement preparedStatement = connection.prepareStatement(deleteQuery)) {
                        // Set the parameter in the DELETE query
                        preparedStatement.setString(1, idToDelete);

                        // Execute the DELETE query
                        int rowsAffected = preparedStatement.executeUpdate();

                        if (rowsAffected > 0) {
                            System.out.println("Hủy vé thành công!");
                            updateTable(); // Update the table after deletion
                        } else {
                            System.out.println("Không tìm thấy vé có ID: " + idToDelete);
                        }
                    } catch (SQLException ex) {
                        System.err.println("Lỗi thực hiện truy vấn xóa: " + ex.getMessage());
                    }
                }
            } catch (SQLException ex) {
                System.err.println("Lỗi kết nối đến cơ sở dữ liệu: " + ex.getMessage());
            }
        }            // TODO add your handling code here:
    }//GEN-LAST:event_btnXoaveActionPerformed

    private void btnSuaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaveActionPerformed
        int selectedRowIndex = tbvemoi.getSelectedRow();

        if (selectedRowIndex != -1) {
            // Get the values from the selected row
            String idve = tbvemoi.getValueAt(selectedRowIndex, 0).toString();
            String idkh = tbvemoi.getValueAt(selectedRowIndex, 1).toString();
            String idnv = tbvemoi.getValueAt(selectedRowIndex, 2).toString();
            String ngaydat = tbvemoi.getValueAt(selectedRowIndex, 3).toString();
            String loaive = tbvemoi.getValueAt(selectedRowIndex, 4).toString();
            String hangbay = tbvemoi.getValueAt(selectedRowIndex, 5).toString();
            String diemdi = tbvemoi.getValueAt(selectedRowIndex, 6).toString();
            String diemden = tbvemoi.getValueAt(selectedRowIndex, 7).toString();
            String ngaybay = tbvemoi.getValueAt(selectedRowIndex, 8).toString();
            String giobay = tbvemoi.getValueAt(selectedRowIndex, 9).toString();

            // Fill the input fields with the selected data
            txtidve.setText(idve);
            cboidkh.setSelectedItem(idkh);
            cboidnv.setSelectedItem(idnv);
            cbohangbay.setSelectedItem(hangbay);
            cboloaive.setSelectedItem(loaive);
            txtngaydat.setText(ngaydat);
            txtdiemdi.setText(diemdi);
            txtdiemden.setText(diemden);
            txtngaybay.setText(ngaybay);
            txtgiobay.setText(giobay);

        } else {
            System.out.println("Vui lòng chọn một dòng để sửa!");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnSuaveActionPerformed

    private void cboloaiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboloaiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboloaiveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddve;
    private javax.swing.JButton btnLuuve;
    private javax.swing.JButton btnSuave;
    private javax.swing.JButton btnXoave;
    private javax.swing.JComboBox<String> cbohangbay;
    private javax.swing.JComboBox<String> cboidkh;
    private javax.swing.JComboBox<String> cboidnv;
    private javax.swing.JComboBox<String> cboloaive;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tbvemoi;
    private javax.swing.JTextField txtdiemden;
    private javax.swing.JTextField txtdiemdi;
    private javax.swing.JTextField txtgiobay;
    private javax.swing.JTextField txtidve;
    private javax.swing.JTextField txtngaybay;
    private javax.swing.JTextField txtngaydat;
    // End of variables declaration//GEN-END:variables
}
